{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport gammaLogPDF from '@stdlib/stats-base-dists-gamma-logpdf';\n\n\n// MAIN //\n\n/**\n* Evaluates the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} evaluated logPDF\n*\n* @example\n* var y = logpdf( 0.1, 1, 1.0 );\n* // returns ~-0.1\n*\n* @example\n* var y = logpdf( 0.5, 2, 2.5 );\n* // returns ~-0.111\n*\n* @example\n* var y = logpdf( -1.0, 4, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( NaN, 1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 0.0, 1, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, -2, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 0.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 0.0, 2.0 );\n* // returns -Infinity\n*\n* @example\n* var y = logpdf( 0.0, 0.0, 2.0 );\n* // returns Infinity\n*\n* @example\n* var y = logpdf( 2.0, 1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = logpdf( 2.0, 1, -1.0 );\n* // returns NaN\n*/\nfunction logpdf( x, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaLogPDF( x, k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default logpdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport { factory as factoryGamma } from '@stdlib/stats-base-dists-gamma-logpdf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the natural logarithm of the probability density function (PDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} logPDF\n*\n* @example\n* var myLogPDF = factory( 6.0, 7.0 );\n* var y = myLogPDF( 7.0 );\n* // returns ~-32.382\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Natural logarithm of the probability density function (PDF) for an Erlang distribution.\n*\n* @module @stdlib/stats-base-dists-erlang-logpdf\n*\n* @example\n* import logpdf from '@stdlib/stats-base-dists-erlang-logpdf';\n*\n* var y = logpdf( 0.5, 2, 2.5 );\n* // returns ~-0.111\n*\n* var myLogPDF = logpdf.factory( 6, 7.0 );\n* y = myLogPDF( 7.0 );\n* // returns ~-1.864\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["logpdf","x","k","lambda","isNonNegativeInteger","gammaLogPDF","NaN","factory","factoryGamma","constantFunction","setReadOnly","main"],"mappings":";;kcAoFA,SAASA,EAAQC,EAAGC,EAAGC,GACtB,OAAMC,EAAsBF,GAGrBG,EAAaJ,EAAGC,EAAGC,GAFlBG,GAGT,CChDA,SAASC,EAASL,EAAGC,GACpB,OAAMC,EAAsBF,GAGrBM,EAAcN,EAAGC,GAFhBM,EAAkBH,IAG3B,CCDAI,EAAAC,EAAA,UAAAJ"}